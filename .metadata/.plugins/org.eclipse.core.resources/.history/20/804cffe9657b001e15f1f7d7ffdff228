

//		author                                    Umang Bhatnagar     @umangbhatnagar@virtusa.com
//		*************************************     Here the whole script is written keeping MACOS		    *************************************
//		*************************************	  in mind. "MMTUtilityMethods" class has been written	    *************************************			
//		*************************************	  for the low level implementation by segregating into 	    *************************************
//		*************************************	  different methods. These methods are later called   	    *************************************
//		*************************************	  as in need in class "MMTChromeAndFireFox"	to come		    *************************************
//		*************************************	  up with a meaningful script as asked for.					*************************************


package com.avirtusaa;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.StandardCharsets;
import java.time.Duration;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbookFactory;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;


public class BaseUtilitiesTestClass {


	private WebDriver driver;
	private WebDriverWait webDriverWait1;
	private String path1;
	private Object [][] userCredentials;

	public BaseUtilitiesTestClass(String browserType, long timeForElementDiscovery)
	{


		if(browserType.toLowerCase().equals("firefox") )
		{
			System.out.println(System.getProperty("user.dir")+"/drivers/geckodriver");
			path1 = System.getProperty("user.dir");
			System.out.println("#########");
			System.out.println(path1);
			System.setProperty("webdriver.gecko.driver", path1+"/drivers/geckodriver");
			this.driver = new FirefoxDriver();
			webDriverWait1 = new WebDriverWait(driver, Duration.ofMillis(timeForElementDiscovery));
		}

		else if (browserType.toLowerCase().equals("chrome") )
		{
			System.out.println(System.getProperty("user.dir")+"/drivers/chromedriver_mac64");
			path1 = System.getProperty("user.dir");
			System.out.println("#########");
			System.out.println(path1);
			System.setProperty("webdriver.chrome.driver", path1+"/drivers/chromedriver-mac-x64/chromedriver");

			this.driver = new ChromeDriver();
			webDriverWait1 = new WebDriverWait(driver, Duration.ofMillis(timeForElementDiscovery));
		}

	}

	public void maximizeBrowser()
	{
		driver.manage().window().maximize();

	}


	public void visitPage(String urlReceived)
	{
		driver.get(urlReceived);
	}


	public WebElement elementGrabber(String xpathReceived)
	{
		WebElement webelement1 = driver.findElement(By.xpath(xpathReceived));
		return webelement1;
	}



	public void typeStringValues(WebElement elementReceived, String messageStringReceived)
	{
		elementReceived.sendKeys(messageStringReceived);
	}


	public void waitForAnElement(WebElement waitForElementReceived)
	{

		webDriverWait1.until(ExpectedConditions.visibilityOf(waitForElementReceived));

	}

	public void waitForAnElementTextDiscovery(WebElement waitForElementReceived, String stringToFindReceived)
	{

		webDriverWait1.until(ExpectedConditions.textToBePresentInElement(waitForElementReceived, stringToFindReceived));

	}


	public void clickTheElement(WebElement elementToBeClickedReceived)
	{
		elementToBeClickedReceived.click();

	}


	public void escapeFocus()
	{
		Actions actions1 = new Actions(driver);
		actions1.sendKeys(Keys.ESCAPE).perform();
	}



	public void terminateBrowser()
	{
		driver.quit();
	}


	public  Object[][] excelReader() throws EncryptedDocumentException, IOException
	{


		System.out.println(path1+"/seleniumVirtusa.xlsx");


		File filePathI = new File(path1+"/sauceDemo.xlsx");
		FileInputStream fileInputStreamI = new FileInputStream(filePathI);



		Workbook workbookI = WorkbookFactory.create(fileInputStreamI);
		//Workbook workbook2I = new XSSFWorkbook();		


		//Workbook workbook1I = WorkbookFactory.create(filePathI);

		Sheet sheetI = workbookI.getSheet("Credentials");
	//	CellStyle cellStyleI = sheetI.getRow(0).getCell(0).getCellStyle();
//		
//		Short backgroundColorFill = cellStyleI.getFillBackgroundColor();
//		Short foregroundColorFill = cellStyleI.getFillForegroundColor();
//		int cellWidth = sheetI.getColumnWidth(0);
//		
//		
		int rowCount = sheetI.getLastRowNum();
		
		
//
//
		System.out.println("Total state entries are: "+(rowCount-0));


		System.out.println(sheetI.getRow(0).getCell(0).getStringCellValue()+ '\t'+ '\t'+ '\t'+ '\t'+ sheetI.getRow(0).getCell(1).getStringCellValue());
		System.out.println("###############################################################");
		for (int row = 1; row<=rowCount; ++row)
		{
			System.out.print(sheetI.getRow(row).getCell(0).getStringCellValue()+ '\t'+ '\t'+ '\t'+ '\t'+ sheetI.getRow(1).getCell(1).getStringCellValue() );
			System.out.println();
			//workbookI.removeSheetAt(row);

			//userCredentials[row][1] = 
			
			
		}
		
		
		userCredentials = new Object[rowCount][2];
		String password = sheetI.getRow(1).getCell(1).getStringCellValue();
		
		
		//reading data from excel and caching locally here in an object array.
		
		for(int row=1; row<=rowCount; ++row)
		{
			
				userCredentials[row-1][0] = sheetI.getRow(row).getCell(0).getStringCellValue();
				userCredentials[row-1][1] = password;
		}
		
		
		System.out.println("Here is data fetched from local buffer");
		
		//fetching data from excel and cached locally here from an object array.
		
				for(int row=1; row<=rowCount; ++row)
				{
					for(int column = 0; column<=1; ++column)
					{
						
						System.out.print((userCredentials[row-1][column]));
						System.out.print("" +'\t'+'\t'+'\t'+'\t');
					}
					System.out.println();
				}
		
		
		
		
		

//		for(int i=2;i<=5000;++i)
//		{
//			Sheet dynamicSheet = workbookI.createSheet("Sheet"+i);
//			
//			
//			dynamicSheet.setColumnWidth(0,cellWidth);
//			
//
//			for (int row =0; row<=rowCount; ++row)
//			{
//				//System.out.println(sheetI.getRow(row).getCell(0).getStringCellValue());
//				workbookI.getSheet("Sheet"+i).createRow(row).createCell(0).setCellValue(  sheetI.getRow(row).getCell(0).getStringCellValue() + "  : ladki walon ka phhata bhosda behanchod !!");
//				dynamicSheet.getRow(row).getCell(0).setCellStyle(cellStyleI);
//				
//				
//				
//			}
//
//		}


		File filePath2I = new File(path1+"/seleniumVirtusa.xlsx");



		FileOutputStream fileOutputStreamI = new FileOutputStream(filePath2I);



		workbookI.write(fileOutputStreamI);

		

		
		return userCredentials;



	}





}
